package fr.formation.inti.entities;
// Generated 4 mai 2022, 11:33:36 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.validation.Valid;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.springframework.validation.annotation.Validated;

import fr.formation.inti.ann.FieldMatch;

/**
 * User generated by hbm2java
 */

@FieldMatch(password = "password", confirmPassword = "confirmPassword", message = "Mots de passe diff√©rents !")
@Entity
@Table(name = "user", catalog = "ligue1_gamble", uniqueConstraints = @UniqueConstraint(columnNames = "mail"))
public class User implements java.io.Serializable {

	private Integer userId;

	@Valid
	private Person person;

	
	@Email
	private String mail;

	@NotEmpty(message = "Champ requis")
	private String password;

	@NotEmpty(message = "Champ requis")
	private String confirmPassword;
	private String picturePath;

	private Date lastConnection;
	private String status;
	private Set<Gambling> gamblings = new HashSet<Gambling>(0);
	private Set<Wallet> wallets = new HashSet<Wallet>(0);
	private Set<UserRole> userRoles = new HashSet<UserRole>(0);
	
	private String photosImagePath;

	public User() {
	}

	public User(Person person, String mail, String password, String confirmPassword) {
		this.person = person;
		this.mail = mail;
		this.password = password;
		this.confirmPassword = confirmPassword;
	}

	public User(Person person, String mail, String password, String confirmPassword, String picturePath,
			Date lastConnection, String status, Set<Gambling> gamblings, Set<Wallet> wallets, Set<UserRole> userRoles) {
		this.person = person;
		this.mail = mail;
		this.password = password;
		this.confirmPassword = confirmPassword;
		this.picturePath = picturePath;
		this.lastConnection = lastConnection;
		this.status = status;
		this.gamblings = gamblings;
		this.wallets = wallets;
		this.userRoles = userRoles;
	}

	@Override
	public String toString() {
		return "User [userId=" + userId + ", person=" + person + ", mail=" + mail + ", password=" + password
				+ ", confirmPassword=" + confirmPassword + ", picturePath=" + picturePath + ", lastConnection="
				+ lastConnection + ", status=" + status + "]";
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "person_id", nullable = false)
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@Column(name = "mail", unique = true, nullable = false, length = 45)
	public String getMail() {
		return this.mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	@Column(name = "password", nullable = false, length = 200)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "confirm_password", nullable = false, length = 200)
	public String getConfirmPassword() {
		return this.confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	@Column(name = "picture_path", length = 200)
	public String getPicturePath() {
		return this.picturePath;
	}

	public void setPicturePath(String picturePath) {
		this.picturePath = picturePath;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "last_connection", length = 10)
	public Date getLastConnection() {
		return this.lastConnection;
	}

	public void setLastConnection(Date lastConnection) {
		this.lastConnection = lastConnection;
	}

	@Column(name = "status", length = 45)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Gambling> getGamblings() {
		return this.gamblings;
	}

	public void setGamblings(Set<Gambling> gamblings) {
		this.gamblings = gamblings;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Wallet> getWallets() {
		return this.wallets;
	}

	public void setWallets(Set<Wallet> wallets) {
		this.wallets = wallets;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<UserRole> getUserRoles() {
		return this.userRoles;
	}

	public void setUserRoles(Set<UserRole> userRoles) {
		this.userRoles = userRoles;
	}

	@Transient
	public String getPhotosImagePath() {
		if (picturePath == null || userId == null)
			return null;

		return "user-photos/" + userId + "/" + picturePath;
	}
}
